# We can select elements from a matrix using
#     matrix[m,n], selects the element in the mth row and nth column
#     matrix[a:b, c:d], selects a matrix from the original matrix
#     matrix[a,] or matrix[,a], selects the entire ath row/column
#     matrix[c(n,m),c(a,b)] will select the n and m rows and the a and b columns
#     matrix[a:b] will return a vector with entries being as if the columns of the matrix had been stacked on top of each
#       and then the a:b are selected
# Using a negative number will select all entries except that one
mymatrix[2,3]
mymatrix[1,]
mymatrix[-3,-1]
mymatrix[c(1,2),c(2,3)]
mymatrix[25:35]
# If the matrix is named, we can use the name to select
mymatrix[T,c("Ones", "Fourties")] #NOTE: the TRUE in the first parameter will select all the rows
# We can also use two logical vectors with the same length as the number of rows/columns. Then the [] selection will return
#   those rows/columns corresponding to true in the logical vectors
# Selecting a column matrix or a row matrix from a matrix will return a vector instead of an n x 1 or 1 x n matrix
class(mymatrix[1,])
# To avoid this behaviour, we add an arguement to the selection function drop = F. This will then select a matirx
class(mymatrix[1, ,drop = F])
# We can select using a single logical vector also, this will also treat the matrix as columns stacked on top of each other and
#   then apply the logical vector. Once the logical vector runs out, it will simply return to the beginning and start over
mymatrix[c(T,F)] #This returns every other entry
# We can use the behaviour above to filter the matrix like we filter vectors by using operators
mymatrix[mymatrix %% 2 == 0] # the name used to compare must be the same as the matrix
mymatrix[mymatrix > 23, drop = F]
# To extend a matrix, we can use the cbind() and rbind() functions, this requires that the matricies or vectors stuck together
#   have the same number of columns/rows (depending on the function)
cbind(mymatrix,rowSums(mymatrix))
rbind(mymatrix, colSums(mymatrix))
# To delete a row/column, we simply need to select all but a row and reassign it to the same matrix
mymatrix <- mymatrix[-1, -5]
# Just like vectors, using the standard arithmetic and comparison operators does the operation element wise
mymatrix + 5
mymatrix < 23
# As with vectors, we can modify elements of a matrix by using both the selection "[]" and the assignment operators "<-"
mymatrix[1,2] <- 2341
mymatrix[mymatrix %% 2 == 0] <- 2
# Operations on two matrices (+ - * /) will perform them element-wise
# To do standard matrix multiplication, we use "%*%"
identity <- cbind(c(4,3), c(3,2)) %*% cbind (c(-2,3), c(3,-4))
# We can transpose a matrix using the t(matrix) function. This will also transpose the names
t(mymatrix)
# We can find the dimensions of a matrix by using dim(matrix).This will return a vector with the row and the column numbers
dim(mymatrix)
class(dim(mymatrix))
# We can cut a matrix to size by assigning values to the dim() function. dim(matrix) <- c(a,b) will modify the matrix to be an
#   a x b matrix as long as the product of a and b matches the total number of entries in the matrix
# NOTE: This function will look for numbers from the original matrix and fill the new matrix column-wise
dim(mymatrix) <- c(12,3); mymatrix
#-----------------------------------------------------------------------------------------------------------------------------
# DATA FRAMES
# This data type is useful for storing many different of data types
# Columns if the data frame must be of the same data type but different columns can be of different types
# Data frames are like relational databases
# Data frames can be large so we can use the functions head(dframe) and tail(dframe) to print out the first and last few
#   entries in the data frame (this is useful when dealing with large data sets)
# str(dframe) prints out the structure of the data frame. This tells us information such as # variables, the values, data type
# To construct a data frame, we use: data.frame(vector1, vecotr2, ...). The vectors must all be of the same length
# Observations are the names of the rows of the data frome, be default these are the entries in the first column of the dframe
# The columns of the data frame are known as the variables of the data frame
# Selecting elements in a data frame works the same way as selecting elements in a matrix
#   [m,n], [a:b, c:d], [a,], [,a], ["name"]
# If we know the names of the columns of the data frame, we can call an entire column by using: dframe$col_name (notice no "")
# To select all the rows of a data frame for which a condition is met, me use: subset(dframe, subset = condition)
#   examples of conditions include: diameter < 1, even (assuming "even" is either T or F), col_name < 3
#-----------------------------------------------------------------------------------------------------------------------------
# LISTS
# This allows you to represent many objects all in one data type. These don't have to be related to each other at all
# We can create a list by using: list(elm_1, elm_2, ...)
myList <- list(1, x, mymatrix, "banana")
# We can name the elements of a list like the elements of a vector my using the names() function
# Alternatively, we can name the elements of the list while creating then by doing:
#       list(name1 = elm_1, name2 = elm_2, ...), notice that the names do not have "" around them
names(myList) <- c("numeric", "vector", "matrix", "character")
myList2 <- list(numeric = 2, vector = 2:13, matrix = matrix(1:4, byrow = T, nrow = 2))
# We can get the nth element of a list by using list[[n]], note that this is also 1-indexed
myList[[2]]
# We can also call an element by using its name list[["name"]] or list$name (note that the second one does not use "")
myList[["matrix"]]
myList$character
# Since returning the nth element of the list returns that element, we can then perform functions on it as if it were the
#   original item
myList$vector [2]
myList$matrix [4,]
# We can add a new element to a list by using list(old_list,new_list). The new element must be a list also so we can create
#   a new list of only one element before adding it to the old list
myList3 <- c(myList, list(2:14))
myList3 <- c(myList, vector = list(2:14))
# We can also inspect the structure of a lsit by using str(list)
str(myList)
# We can use typeof(list) and it will tell us that it is a "list" type object. length(list) will return the length
typeof(mylist)
length(mylist)
#-----------------------------------------------------------------------------------------------------------------------------
#FACTORS
# this is a data type to store data that can only take on discrete values
# we can reate a factor my using factor(vector)
logic_factor <- factor(c(T,T,T,F,F,T,F,F))
# Factors can be either ordinal or normal. Ordinal factors have an inherent order to them (ie. high, medium, low)
# The function summary(var) can be used on any variable to get information on it
summary(logic_factor)
summary(myList)
# The levels of a factor are the different values that the elements can take. By default these are the distinct values in the
#   factor when it is created (in alphabetical order)
# We can check the current levels in a factor by using: levels(factor)
levels(logic_factor)
# We can assign names to the levels in a factor (it may be useful for when the names are different than the inputs)
# After assigning names to the levels, printing out a factor will print out the names instead of the entries
# NOTE: Make sure the names are in the correct order before assigning them
levels(logic_factor) <- c("No Phone", "Phone")
# By default the factors are unordered so to order them from smallest to largest, we do: while creating the factor
# factor(vector, ordered = T, c("level1", level2", ...)), the levels must initially be the same as the entries, we can name
#   them later using the names() function
orderedFactor <- factor(c(1,100,10), ordered = T, c(1,10,100))
# Like vectors and lists, we can select the nth element from a factor using factor[n]
orderedFactor[2]
# In an ordered factor, we can compare different items even if they have no inherent order. The comparisons will be in
#   accordance with the way that we ordered the elements in the factor
# We can use typeof(list) and it will tell us that it is a "list" type object. length(list) will return the length
typeof(mylist)
length(mylist)
# We can use typeof(list) and it will tell us that it is a "list" type object. length(list) will return the length
typeof(myList)
length(myList)
myList[c("character","matrix")]
myList[c(T,T,F,T)]
myList[c("numeric", "character")]
myList$character
myList$c
myList$c
# We can modify a list by first accessing it using "[[]]" and then also using the assignment operator
myList[["character"]] <- "apple"
# We can modify a list by first accessing it using "[[]]" and then also using the assignment operator
myList[["character"]] <- "apple"; myList
myList3 <- c(myList, vector = 2:14)
myList3 <- c(myList, vector = 2:14)
# This allows you to represent many objects all in one data type. These don't have to be related to each other at all
# We can create a list by using: list(elm_1, elm_2, ...)
myList <- list(1, x, mymatrix, "banana")
#BASICS
# Comment code using "#", all text to the right is considered comments
# Assign Values to a variable using the assignment operator "<-"
x <- 4
# We can call a variable using its name
x
# Variables in R are generic, so no type, we can also assign strings using the same operator
# A variable that was previously an integer can be reassigned as a string
x <- "text"
# Operations in R are the same as in other languages and follow order of operations
#   addition "+", subtraction "-", multiplication "*", division "/", modulus "%%", exponent "^"
#   NOTE: division in R uses standard division
10/3 # this will result in 3.333333
# Comparison operators in R are the same as in other languages and return either TRUE or FALSE
#   ">", ">=", "<", "<=", "==", "!=", "&", "|", "!", xor(x,y)
# Data types include: Numerics "4.5", Integers "4", Logical "TRUE", Characters/Strings "text"
# NOTE: Integers are also numerics
# we can check the data type of a variable using the function: class(var_name), this returns a string indicating data type
class(x) # this returns "character" since we reassigned it previously
# Remember that R is case sensitive so "x" and "X" are two different things in R
# The shortcut CTRL + L clears the console (does not clear the environment, variables are still assigned and present)
# Pressing CTRL + ENTER will run the currently highlighted lines of code
# We can block comment, or comment out a certain number of lines by highlighting them and using CTRL + SHIFT + c
#   Pressing this again will uncomment the code (remove the # in front)
# We can use the function ls() to see all the variables in the current workspace
# We can find the help webpage for a function by using ?function_name, which will open up a webpage
# We usually dont require anything to end the lines of code in R but we can write multiple lines of code on the same line by
#   separating the code using ";"
# Code is read in order, so we must be conscious of the order in which code appears in our program as running it for the first
#   timel, some things will not work out of order
# If you look at the files, you will see that there is an .rHistory file saved with all your r scripts. This is a plaintext
#   file that keeps track of all the code that was run.
#-----------------------------------------------------------------------------------------------------------------------------
# VECTORS
# a vector is a one-dimensional array holding data
# a vector is created using: c(elm_1, elm_2,...)
# NOTE: a vector can only hold data of one type, so c(5, "banana") is an invalid vector.
# This type of vector that can only hold one data type is called an atomic vector.
x <- c(1,2,4,8,16)
y <- c(1,2,3,4,5)
# However, if you do input invalid data, r will try to coerce the data into a lower type to see if it can create a valid vector
# The teirs go: logical > integer > double > character
# Using the class() function on a vector returns the data type of its elements
class(x)     # returns "numeric"
# We can name the specific elements in a vector to give them meaning using names(vector) <- names_vector
# NOTE: the length of the names vector must be the same as the length of the original vector and can only contain strings
names(x) <- c("2^0", "2^1", "2^2", "2^3", "2^4")
# After assigning names, printing out the variable will also print out the names associated with each entry
x
# An alternative way to do this is to already have a vector of names and assign it to the vector
names <- c("2^0", "2^1", "2^2", "2^3", "2^4")
names(x) <- names # This method will yield the same result as before
# Taking the sum or difference between two vectors will result in standard vector addition/subtraction
c(1,2,3) + c(1,2,3) # results in c(2,4,6)
# Performing any operation on a vector will do the operation element-wise, like using operators or comparisons
x < 3
x + 5
# Using comparison operators on two vectors of equal length will result in a logical vector with the operations all performed
#   element-wise
x > y
# The function sum(vector) finds the sum of all elements in a numeric vector
sum(x)
# The function length(vector) returns the length of the vector
length(x)
# We can select the nth element of a vector by using: vector[n] (vectors are 1-indexed)
# We can also select multiple elements from a vector by using: vector[c(n1, n2, ...)]
# We can also select the elements of the vector that satisfy a condition (evaluate to TRUE)
x[3]
x[c(2,4,1)]
x[x > 2]
# we can create a new vector using elements of the old vector by using new_vector <- old_vector[c(n1, n2, n3,...)]
z <-  x[c(2,4,1)]
# We can create a vector of an arithmetic sequence using: seq(first_num, end_num, by = interval)
seq(0,10,by = 1)
# We can create a repetition of the same number by using : rep(number, times)
rep(1,5)
# To simplyfy selecting the elements from indecies a to b, we can instead use a:b to replace c(a, a + 1, ..., b)
# The : operator also works for creating sequences backwards
2:4
3:-4
x[2:4]
# We can modify values in a vector by using the selection operator "[]" and then using the assigning operator "<-"
y[3] <- 5
z[z > 1] <- 12 # NOTE: the name on the inside needs to match the name of the vector
# If a vector has been named using the names() function, we can call elements of a vector by using its name
# NOTE: notice that this still required the use of quotation marks (in other applications quotations my not be necessary)
x["2^3"]
x[c("2^3", "2^1")]
# We can use a logical vector of the same length as another vector to return the elements of the vector corresponding to the
#   TRUE values in the logical vector
log_vector <- c(T, F, T, F, F)
x[log_vector]
# We can combine vectors into one long vector using: c(vector_1, vector_2, ...)
c(x,y,z)
# mean(vector), median(vector), min(vector), max(vector) do as would expect and can only be used on numeric vectors
# range(vector) returns two numbers corresponding to the lowest and highest numbers respectively
# The function order(vector) returns a vector with the ranked position of each element in the vector
#   We can use this to order a vector from least to greatest by doing vector[order(vector)]
z[order(z)]
# We can delete a vector by assigning the value of NULL to a vector
z <- NULL
#-----------------------------------------------------------------------------------------------------------------------------
#MATRICIES
# Like vectors, vectors can only contain one data type
# We can construct a matrix by using: matrix(entries_vector, byrow = T/F, nrow = n, ncol = m)
#       byrow will fill in the vector by rows if true and by columns if false
#       if the given data is not enough to fill in the matrix given the parameters, it will start over from the beginning
#       if either nrow or ncol is given (but not both), the function will try to match the data using the given parameter
mymatrix <- matrix(1:50, byrow = F, nrow = 10, ncol = 5)
# We can nam the rows and columns of a matrix the same way as we name elements in a vector
#   rownames(matrix) <- rownames_vector, the rownames_vector must be a character vector of the same length as the # of rows
#   colnames(matrix) <- colnames_vector, the colnames_vector must be a character vector of the same length as the # of cols
# Printing out a names matrix will include the names
rownames(mymatrix) <- c("Ones", "Twos", "Threes", "Fours", "Fives", "Sixes", "Sevens", "Eights", "Nines", "Tens")
colnames(mymatrix) <- c("Ones", "Tens", "Twenties", "Thirties" , "Fourties")
mymatrix
# rowSums(matrix) and colSums(matrix) will print out the sums of the rows/cols in a vector with the same length as the number
#   of rows/cols (NOTE: paya attention to the capital in the two functions)
rowSums(mymatrix)
colSums(mymatrix)
# We can select elements from a matrix using
#     matrix[m,n], selects the element in the mth row and nth column
#     matrix[a:b, c:d], selects a matrix from the original matrix
#     matrix[a,] or matrix[,a], selects the entire ath row/column
#     matrix[c(n,m),c(a,b)] will select the n and m rows and the a and b columns
#     matrix[a:b] will return a vector with entries being as if the columns of the matrix had been stacked on top of each
#       and then the a:b are selected
# Using a negative number will select all entries except that one
mymatrix[2,3]
mymatrix[1,]
mymatrix[-3,-1]
mymatrix[c(1,2),c(2,3)]
mymatrix[25:35]
# If the matrix is named, we can use the name to select
mymatrix[T,c("Ones", "Fourties")] #NOTE: the TRUE in the first parameter will select all the rows
# We can also use two logical vectors with the same length as the number of rows/columns. Then the [] selection will return
#   those rows/columns corresponding to true in the logical vectors
# Selecting a column matrix or a row matrix from a matrix will return a vector instead of an n x 1 or 1 x n matrix
class(mymatrix[1,])
# To avoid this behaviour, we add an arguement to the selection function drop = F. This will then select a matirx
class(mymatrix[1, ,drop = F])
# We can select using a single logical vector also, this will also treat the matrix as columns stacked on top of each other and
#   then apply the logical vector. Once the logical vector runs out, it will simply return to the beginning and start over
mymatrix[c(T,F)] #This returns every other entry
# We can use the behaviour above to filter the matrix like we filter vectors by using operators
mymatrix[mymatrix %% 2 == 0] # the name used to compare must be the same as the matrix
mymatrix[mymatrix > 23, drop = F]
# To extend a matrix, we can use the cbind() and rbind() functions, this requires that the matricies or vectors stuck together
#   have the same number of columns/rows (depending on the function)
cbind(mymatrix,rowSums(mymatrix))
rbind(mymatrix, colSums(mymatrix))
# To delete a row/column, we simply need to select all but a row and reassign it to the same matrix
mymatrix <- mymatrix[-1, -5]
# Just like vectors, using the standard arithmetic and comparison operators does the operation element wise
mymatrix + 5
mymatrix < 23
# As with vectors, we can modify elements of a matrix by using both the selection "[]" and the assignment operators "<-"
mymatrix[1,2] <- 2341
mymatrix[mymatrix %% 2 == 0] <- 2
# Operations on two matrices (+ - * /) will perform them element-wise
# To do standard matrix multiplication, we use "%*%"
identity <- cbind(c(4,3), c(3,2)) %*% cbind (c(-2,3), c(3,-4))
# We can transpose a matrix using the t(matrix) function. This will also transpose the names
t(mymatrix)
# We can find the dimensions of a matrix by using dim(matrix).This will return a vector with the row and the column numbers
dim(mymatrix)
class(dim(mymatrix))
# We can cut a matrix to size by assigning values to the dim() function. dim(matrix) <- c(a,b) will modify the matrix to be an
#   a x b matrix as long as the product of a and b matches the total number of entries in the matrix
# NOTE: This function will look for numbers from the original matrix and fill the new matrix column-wise
dim(mymatrix) <- c(12,3); mymatrix
#-----------------------------------------------------------------------------------------------------------------------------
# DATA FRAMES
# This data type is useful for storing many different of data types
# Columns if the data frame must be of the same data type but different columns can be of different types
# Data frames are like relational databases
# Data frames can be large so we can use the functions head(dframe) and tail(dframe) to print out the first and last few
#   entries in the data frame (this is useful when dealing with large data sets)
# str(dframe) prints out the structure of the data frame. This tells us information such as # variables, the values, data type
# To construct a data frame, we use: data.frame(vector1, vecotr2, ...). The vectors must all be of the same length
# Observations are the names of the rows of the data frome, be default these are the entries in the first column of the dframe
# The columns of the data frame are known as the variables of the data frame
# Selecting elements in a data frame works the same way as selecting elements in a matrix
#   [m,n], [a:b, c:d], [a,], [,a], ["name"]
# If we know the names of the columns of the data frame, we can call an entire column by using: dframe$col_name (notice no "")
# To select all the rows of a data frame for which a condition is met, me use: subset(dframe, subset = condition)
#   examples of conditions include: diameter < 1, even (assuming "even" is either T or F), col_name < 3
#-----------------------------------------------------------------------------------------------------------------------------
# LISTS
# This allows you to represent many objects all in one data type. These don't have to be related to each other at all
# We can create a list by using: list(elm_1, elm_2, ...)
myList <- list(1, x, mymatrix, "banana")
# We can name the elements of a list like the elements of a vector my using the names() function
# Alternatively, we can name the elements of the list while creating then by doing:
#       list(name1 = elm_1, name2 = elm_2, ...), notice that the names do not have "" around them
# We call the names of the entries  "tags"
names(myList) <- c("numeric", "vector", "matrix", "character")
myList2 <- list(numeric = 2, vector = 2:13, matrix = matrix(1:4, byrow = T, nrow = 2))
# We can get the nth element of a list by using list[[n]], note that this is also 1-indexed
# With "[[]]" we can only get one item in a list at a time
myList[[2]]
# We can also call an element by using its name list[["name"]] or list$name (note that the second one does not use "")
# Using $ will do partial matching. So doing list$n will yield the same result as list$numeric of list[["numeric"]]
myList[["matrix"]]
myList$character
myList$c
myList[[c("character","matrix")]]
# We can modify a list by first accessing it using "[[]]" and then also using the assignment operator
myList[["character"]] <- "apple"; myList
# Since returning the nth element of the list returns that element, we can then perform functions on it as if it were the
#   original item
myList$vector [2]
myList$matrix [4,]
# We can generate a sublist of the original list by using "[]" on the list. This will make generate a list that is a copy of
#   the original list and altering items in this list will not affect the original list.
# We can use -n to get a list of all items except n
myList[2]
myList[c(2,3)]
myList[-2]
myList[c(T,T,F,T)]
myList[c("numeric", "character")]
# We can add a new element to a list by using list(old_list,new_list). The new element must be a list also so we can create
#   a new list of only one element before adding it to the old list
myList3 <- c(myList, list(2:14))
myList3 <- c(myList, vector = 2:14)
# We can also inspect the structure of a lsit by using str(list)
str(myList)
# We can use typeof(list) and it will tell us that it is a "list" type object. length(list) will return the length
typeof(myList)
length(myList)
#-----------------------------------------------------------------------------------------------------------------------------
#FACTORS
# this is a data type to store data that can only take on discrete values
# we can reate a factor my using factor(vector)
logic_factor <- factor(c(T,T,T,F,F,T,F,F))
# Factors can be either ordinal or normal. Ordinal factors have an inherent order to them (ie. high, medium, low)
# The function summary(var) can be used on any variable to get information on it
summary(logic_factor)
summary(myList)
# The levels of a factor are the different values that the elements can take. By default these are the distinct values in the
#   factor when it is created (in alphabetical order)
# We can check the current levels in a factor by using: levels(factor)
levels(logic_factor)
# We can assign names to the levels in a factor (it may be useful for when the names are different than the inputs)
# After assigning names to the levels, printing out a factor will print out the names instead of the entries
# NOTE: Make sure the names are in the correct order before assigning them
levels(logic_factor) <- c("No Phone", "Phone")
# By default the factors are unordered so to order them from smallest to largest, we do: while creating the factor
# factor(vector, ordered = T, c("level1", level2", ...)), the levels must initially be the same as the entries, we can name
#   them later using the names() function
orderedFactor <- factor(c(1,100,10), ordered = T, c(1,10,100))
# Like vectors and lists, we can select the nth element from a factor using factor[n]
orderedFactor[2]
# In an ordered factor, we can compare different items even if they have no inherent order. The comparisons will be in
#   accordance with the way that we ordered the elements in the factor
myList3 <- c(myList, vector = 1:123)
myList3 <- c(myList, vector = list(1:123)
myList3 <- c(myList, vector = list(1:123))
# We can modify a list by first accessing it using "[[]]" and then also using the assignment operator
myList[["character"]] <- "apple";myList
myList3 <- c(myList, vector = list(2:14))
# We can also add a new item to the list by assigning a new tag that does not exist in the old list
myList[["Logical"]] <- T
# We can also add a new item to the list by assigning a new tag that does not exist in the old list
myList[["Logical"]] <- T; myList
# We can delete an item from a list by assigning it the value NULL
myList[["Logical"]] <- NULL; myList
# OBJECT ORIENTED PROGRAMMING
# The class is the blueprints for which we can use to create many instances. While many languages have a single class system, R
#   has three classes: the S3, S4, and the reference class.
# S3 Class
# Lacks a formal definition and can be created simply by adding a class attribute to it. Most built in structures are of this type
# create a list with required components
s <- list(name = "John", age = 21, GPA = 3.5)
# name the class appropriately
class(s) <- "student"
# S4 Class
# Have a formally defined structure and are defined using the setClass() function. Instances of the class are created using the
# new() function is used to create instances of the class
setClass("student", slots=list(name="character", age="numeric", GPA="numeric"))
# name the class appropriately
class(s) <- "student"
# Have a formally defined structure and are defined using the setClass() function. Instances of the class are created using the
# new() function is used to create instances of the class
setClass("student", slots=list(name="character", age="numeric", GPA="numeric"))
# OBJECT ORIENTED PROGRAMMING
# The class is the blueprints for which we can use to create many instances. While many languages have a single class system, R
#   has three classes: the S3, S4, and the reference class.
# S3 Class
# Lacks a formal definition and can be created simply by adding a class attribute to it. Most built in structures are of this type
# create a list with required components
s <- list(name = "John", age = 21, GPA = 3.5)
# name the class appropriately
class(s) <- "student"
# S4 Class
# Have a formally defined structure and are defined using the setClass() function. Instances of the class are created using the
# new() function is used to create instances of the class
setClass("student", slots=list(name="character", age="numeric", GPA="numeric"))
# A list with its class attribute set to some class name is a S3 object. The components of the list become the variables of the
#   object
s
1 &&1
1 &1
# It is common practice to use a function with the same name as the class to create objects
# The following is an example of a constructor for an instance of the "student" class
student <- function(name, age,gpa)
{
if(gpa < 0 || gpa > 4) stop("GPA must be between 0 and 4")
values <- c("name" = name, "age" = age, "GPA" = gpa)
class(values) # We can also set class using attr(values, "class")
return(values)
}
s <- student("Victor", 19, 3.7)
s <- student("Victor", 19, 3.7); s
s
# It is common practice to use a function with the same name as the class to create objects
# The following is an example of a constructor for an instance of the "student" class
student <- function(name, age,gpa)
{
if(gpa < 0 || gpa > 4) stop("GPA must be between 0 and 4")
values <- c("name" = name, "age" = age, "GPA" = gpa)
class(values) <- "student" # We can also set class using attr(values, "class")
return(values)
}
# It is common practice to use a function with the same name as the class to create objects
# The following is an example of a constructor for an instance of the "student" class
student <- function(name,age,gpa)
{
if(gpa < 0 || gpa > 4) stop("GPA must be between 0 and 4")
values <- c("name" = name, "age" = age, "GPA" = gpa)
class(values) <- "student" # We can also set class using attr(values, "class")
return(values)
}
s <- student("Victor", 19, 3.7);
s
s <- student("Victor", 19, 3.7);s
s <- student("Victor", 19, 5);s
s
# When we simply write the name of a object, it get printed using the print() function. But with all these different types of
#   input, how does the print function know how to print these dissimilar objects.
# print() is a generic function and it actually has a collection of methods. These can be checked using methods(print)
methods(print)
# We see that included in the list is print.data.frame and print.factor. So when the generic print() function is given these
#   data types, then it will then pass them to the more defined functions. The general methods names are in the form
#   generic_function.data_type()
# If we look for the print.student() function, we will notice that it does not exist, so how does the function know how to print
#   the "student" object? There is a print.default() function that gets called if no other match is found. All generic functions
#   will have a default method.
# Here we can see a list of default methods
methods(class = "default")
# switch(expression, list) this function will first evaluate the expression for a numeric answer and then select that element
#   from the list.Remember that the list is 1-indexed.
switch(4,1,2,3,4,5,6,7,8,9,10,11)
# The expression can also return a string (if the list is named) and the function will return the value in the list with the
#   same name as the expression
switch("banana", "apple" = "red", "banana" = "yellow")
`%divisible%` <- function(x,y)
{
if(x %% y == 0)
{
return(T)
}else
{
return(F)
}
}
23 %divisible% 12
23 divisible 12
%
23 %divisible% 12
24%divisible%12
